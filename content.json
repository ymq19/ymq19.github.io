{"meta":{"title":"Chaos4Yarn的学习站","subtitle":"","description":"","author":"sss","url":"https://ymq19.github.io","root":"/"},"pages":[{"title":"所有分类","date":"2021-08-14T07:01:30.896Z","updated":"2021-08-14T07:01:30.896Z","comments":true,"path":"categories/index.html","permalink":"https://ymq19.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-08-14T07:05:14.439Z","updated":"2021-08-14T07:05:14.439Z","comments":true,"path":"404.html","permalink":"https://ymq19.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2021-08-14T07:00:58.982Z","updated":"2021-08-14T07:00:58.982Z","comments":true,"path":"about/index.html","permalink":"https://ymq19.github.io/about/index.html","excerpt":"","text":"用来记录学习内容。"},{"title":"","date":"2021-08-14T07:03:10.378Z","updated":"2021-08-14T07:03:10.378Z","comments":true,"path":"list/index.html","permalink":"https://ymq19.github.io/list/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-08-14T07:02:09.211Z","updated":"2021-08-14T07:02:09.211Z","comments":true,"path":"tags/index.html","permalink":"https://ymq19.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"前端基础知识合集","slug":"前端基础知识合集","date":"2021-08-25T05:28:40.000Z","updated":"2021-08-25T07:46:48.658Z","comments":true,"path":"2021/08/25/前端基础知识合集/","link":"","permalink":"https://ymq19.github.io/2021/08/25/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/","excerpt":"","text":"说一下http和https1. 基本概念 http: 超文本传输协议，互联网上应用最为广泛的一种网络协议，是一个客户端服务器请求和应答的标准（TCP），用于从www服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更高效，网络传输减少。 https: 是以安全为目标的HTTP通道，即HTTP加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 2. http和https的区别？ http传输的数据都是未加密的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。 https协议需要ca证书，费用较高 http是超文本传输协议，信息是明文传输，https则具有安全性的ssl加密传输协议 使用不同的链接方式，端口也不同，http协议的端口为80，https的端口为443 http连接很简单，是无状态的；https协议是由ssl+http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全 3. https协议的工作原理 客户使用https url 访问服务器，则要求web服务器建立ssl链接 web服务器接收到客户端的请求后，会将网站的证书，返回或者传输给客户端 客户端和web服务器端开始协商ssl链接的安全等级，也就是加密等级 客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传输给网站 web服务器端通过自己的私钥解密出会话密钥 web服务器通过会话密钥加密和客户端之间的通信 4. https协议的优点 可认证用户和服务器，确保数据发送到正确的客户机和服务器 比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性 现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本 加密的网站在搜索结果中的排名会更高 5. https协议的缺点 握手阶段比较费时，会使页面加载时间延长50%，增加10%~20%的耗电 缓存不如http高效，会增加数据开销 SSL证书也需要钱，功能越强大的证书费用越高 SSL证书需要绑定IP，不能在同一个IP上绑定多个域名，ipv4资源支持不了这种消耗 tcp三次握手，一句话概括 客户端和服务端都需要直到各自可收发，因此需要三次握手 TCP和UDP的区别 TCP 是面向连接的，udp 是无连接的即发送数据前不需要先建立连接 TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付。 并且因为 tcp 可靠，面向连接，不会丢失数据因此适合大数据量的交换 TCP 是面向字节流，UDP 面向报文，并且网络出现拥塞不会使得发送速率降低 TCP 只能是 1 对 1 的，UDP 支持 1 对 1,1 对多 TCP 的首部较大为 20 字节，而 UDP 只有 8 字节 HTTP请求的方式，HEAD方式head：类似于get请求，只不过返回的响应中没有具体的内容，用户获取报头options，允许客户端查看服务器的性能，比如说服务器支持的请求方式等等 一个图片url访问后直接下载怎样实现？请求的返回头里面，用于浏览器解析的重要参数就是 OSS 的 API 文档里面的返回 http 头，决定用户下载行为的参数。 下载的情况下： x-oss-object-type: Normal x-oss-request-id: 598D5ED34F29D01FE2925F41 x-oss-storage-class: Standard 说一下 web Quality （无障碍）能够被残障人士使用的网站才能称得上一个易用（易访问的）的网站 几个很实用的BOM属性对象方法？ location对象 location.href: 返回或设置当前文档的URL location.search: 返回URL中的查询字符串内容 location.hash: 返回URL#后面的内容，如果没有#，返回空 location.host: 返回URL中的域名部分 location.hostname: 返回URL的主域名部分 location.pathname: 返回URL的域名后的部分 location.port: 返回URL中的端口部分 location.protocol: 返回URL中的协议部分 location.assign: 返回当前文档的URL location.replace(): 设置当前文档的URL，并且在history对象的地址列表中移除 location.reload(): 重载当前页面 history对象 history.go(): 前进或后退的页面数 history.back(): 后退一页 history.forward(): 前进一页 Navigator对象 navigator.userAgent: 返回用户代理头的字符串表示 navigator.cookieEnabled: 返回浏览器是否支持（启用）cookie","categories":[{"name":"前端","slug":"前端","permalink":"https://ymq19.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[]},{"title":"CSS知识合集","slug":"CSS知识合集","date":"2021-08-18T08:08:19.000Z","updated":"2021-08-24T08:09:17.199Z","comments":true,"path":"2021/08/18/CSS知识合集/","link":"","permalink":"https://ymq19.github.io/2021/08/18/CSS%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/","excerpt":"","text":"解释一下CSS的盒子模型 标准的css盒模型：width = content IE盒模型：width = content + padding-left + padding-right + border-left + border-right 请你说说CSS选择器有哪些，并举几个例子说明其用法？类型： 基础选择器：通用元素选择器*，标签选择器，class选择器，id选择器 组合选择器：多元素选择器（A, B），后代元素选择器（A B），子元素选择器（A&gt;B），相邻元素选择器（A + B） 属性选择器：具有att属性的元素（E[att]），具有att属性等于“val”的元素（E[att=val]），att属性包含单词 “val” 的所有元素（E[att~=val]），选择 att 属性值以 “en” 开头的所有元素（E[att|=val]） 伪类选择器：E:first-child，E:link，E:visited，E:active，E:hover，E:focus，E:lang(c) 伪元素选择器：E:first-line，E:first-letter，E:before，E:after 请你说说CSS有什么特殊性优先级： 同类型，同级别的样式后者大于前者 ID &gt; 类样式 &gt; 标签 &gt; * 内联 &gt; ID选择器 &gt; 伪类 &gt; 属性选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通用选择器 &gt; 继承的样式 内联样式 &gt; 内部样式 &gt; 外联样式表 !important权重最高 计算特殊性值：CSS样式选择器分为4各等级: a、b、c、d 如果样式是行内样式，a = 1, 0, 0, 0 ID选择器，b = 0, 1, 0, 0 属性选择器，伪类选择器，class类选择器，c = 0, 0, 1, 0 标签、伪元素选择器，d = 0, 0, 0, 1 动态改变层中内容可以使用的方法？ innerHTML innerText 常见浏览器兼容性问题与解决方案？ 不同浏览器的默认标签默认margin和padding不同 解决方案：CSS里 * {margin: 0; padding: 0;} 块属性标签float后，又有横行的margin情况下，在IE6显示的margin比设置的大 解决方案：在float的标签样式控制中加入display: inline; 将其转化为行内属性 设置较小高度标签（一般小于10px），在IE6，IE7中高度超出自己设置的高度 解决方案：给超出高度的标签设置overflow: hidden; 或者设置行高小于你设置的高度 行内属性标签，设置 display:block 后采用 float 布局，又有横行的 margin 的情况，IE6间距bug 解决方案：在display: block; 后面加入display: inline; display: table; 图片默认有间距（使用问题一的解决方案无效） 解决方案：使用float属性为img布局 标签最低高度设置min-height不兼容 解决方案：如果我们要设置一个标签的最小高度 200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;} 透明度的兼容CSS设置 解决方案：ie中使用filter: alpha(opacity=0);（兼容IE8及以下的IE浏览器） firefox中使用opacity: 0; 兼容时都写上即可 列出display的值并说明他们的作用？ 默认值：inline none：隐藏对象。与visibility的属性hidden值不同，其不为被隐藏的对象保留物理空间 inline：指定对象为内联元素 inline-block：指定元素为内联块元素 block：指定元素为块元素 list-item：指定对象为列表项目 table：指定对象为块元素的表格，类同于标签&lt;table&gt; inline-table：指定对象作为内联元素级的表格，类同于html标签&lt;table&gt; table-caption：指定对象作为表格标题，类同于html标签&lt;caption&gt; table-cell：指定对象作为表格单元格，类同于html标签&lt;td&gt; table-row：指定对象作为表格行，类同于html标签&lt;tr&gt; table-row-group：指定对象作为表格行组，类同于html标签&lt;tbody&gt; table-header-group：指定对象作为表格标题组，类同于html标签&lt;thead&gt; table-column：指定对象作为表格列，类同于html标签&lt;col&gt; table-column-group：指定对象作为表格列组显示，类同于html标签&lt;colgroup&gt; table-header-group：指定对象作为表格标题组，类同于html标签&lt;thead&gt; table-footer-group：指定对象作为表格脚注组，类同于html标签&lt;tfoot&gt; run-in：根据上下文决定对象是内联对象还是块级对象（CSS3） box：将对象作为弹性伸缩盒显示（CSS3） inline-box：将对象作为内联块级弹性伸缩盒显示（CSS3） flexbox：将对象作为弹性伸缩盒显示（CSS3） inline-flexbox：将对象作为内联块级弹性伸缩盒显示（CSS3） flex：将对象作为弹性伸缩盒显示（CSS3） inline-flex：将对象作为内联块级弹性伸缩盒显示（CSS3） 如何居中div，如何居中一个浮动元素？ 非浮动元素：设置margin：0 auto，定位，父级元素text-align: center; 浮动元素 设置当前的宽度，然后设置margin-left：50%; position: relative; left: -250px;其中的left是宽度的一半 父元素和子元素同时左浮动，然后父元素相对左移动50%，再然后子元素相对左移动-50% position定位 CSS中link和@import的区别是？ link属于html标签，而@import是CSS提供的 页面被加载时，link同时加载，而@import引用的css等到页面加载完再加载 @import只在IE5以上才能识别，link是html标签，无兼容问题 link方式的样式权重样式@import的权重 请列举几种清除浮动的方法？ 父级div设置高度 结尾处加上div标签，设置clear：both 父级div定义伪类：after和zoom 父级div定义overflow：hidden block，inline和inline-block细节对比？ display：block block元素会独占一行。默认情况下，block元素宽度自动填满其父元素宽度 block元素可以设置width，height属性 display：inline inline元素不会独占一行，多个响铃的行内元素会排列在同一行里，直到一行排列不下 inline元素的margin和padding属性，水平方向的padding和margin会产生边距效果；但竖直方向的padding和margin无效 inline元素设置width，height无效 display：inline-block 看做是排列在一行的block元素 什么是优雅降级和渐进增强？ 优雅降级：web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的和模型布局问题，针对不同版本的IE的hack实践过优雅降级了，为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形势降级体验却不至于完全失效 渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持地功能，向页面增加无害于基础浏览器地额外样式和功能的。当浏览器支持时，它们会自动呈现出来并发挥作用。 说说浮动元素会引起的问题和你的解决办法问题： 父元素的高度无法被撑开，影响与父元素同级的元素 与浮动元素同级的非浮动元素会跟随其后 若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面的显示结构 解决方法： 对于问题（2）（3）使用css设置clear:both即可 对于问题（1）给父元素添加.clearfix:after{content:””;display:block;height:0;clear:both;}也可以使用overflow: hidden; 你有哪些性能优化的方法？ 减少HTTP请求次数 使用CDN 避免空的src和href 为文件头指定Expires 使用gzip压缩内容 把CSS放在顶部 把JS放在底部 避免使用CSS表达式 避免跳转 可缓存的AJAX 使用GET来完成AJAX请求 为什么要初始化CSS样式因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没有对CSS初始化往往会出现浏览器之间的页面显示差异 解释下浮动和它的工作原理？浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留 CSS样式表根据所在网页的位置，可分为哪几种样式表？ 行内样式表 内嵌样式表 外部样式表 谈谈你对CSS中刻度的认识？在CSS中刻度是用于设置元素尺寸的单位 特殊值0可以省略单位。例如：margin: 0px 可以写成margin: 0 一些属性可能允许有负长度值，或者有一定的范围限制。如果不支持长度值，那应该变换到能够被支持的最近的一个长度值 相对长度单位：em，ex，ch，rem，vw，vh，vmax，vmin 绝对长度单位：cm，mm，q，in，pt，pc，px 文本相对长度单位：em，rem（CSS新增的，相对于根元素font-size计算值的倍数） 请你说说em和rem的区别？区别在于em计算的规则依赖于父元素，rem计算的规则依赖根元素 rem：CSS3新增的一个相对单位，相对于根元素font-szie计算值的倍数 em：文本相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被认为设置，则相对于浏览器的默认字体尺寸。 请你说说box-sizing属性的用法？ box-sizing: content-box padding和border不被包含在定义的width和height内。对象的实际高度等于设置的width和border、padding之和，width = width + border + padding，此属性表现为标准模式下的盒模型 box-sizing: border-box padding和border被包含在定义的width和height之内。对象的实际宽度等于设置的width值，即使定义有border和padding也不会高边对象的实际宽度，即此属性表现为怪异模式下的盒模型。 说说你对边距折叠的理解？ 外边距折叠：相邻的两个或多个外边距在垂直方向会合并成一个外边距 垂直方向外边距合并计算 参加的折叠 margin 都是正值：取其中 margin 较大的值为最终 margin 值 参与折叠的 margin 都是负值：取的是其中绝对值较大的，然后从0开始，负向位移 参与折叠的 margin 中有正值和负值：先取出负 margin 中绝对值最大的，然后和正margin值中最大的 margin 相加 说说隐藏元素的方式有哪些？ 使用CSS的 display: none; 不会占用原来的位置 使用CSS的 visibility: hidden; 会占用原来的位置 使用HTML5中的新增属性 hidden: “hidden”，不会占用原来的位置 谈谈你对BFC和IFC的理解？1. 什么是BFC和IFC BFC即“块级格式化上下文”，IFC即行内格式化上下文。可以把BFC想象成一个大箱子，箱子外边的元素将不与箱子内的元素产生作用 BFC决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。浮动元素会形成BFC，浮动元素内部子元素主要受浮动元素影响，两个浮动元素之间是互不影响的。也可以说BFC是一个作用范围。 2. 如何产生BFC float值不为none overflow的值不为visible display的值为table-cell，table-caption，inline-box中其中一个 position的值不为relative和static 3. BFC的作用与特点不和浮动元素重叠，清除外部浮动，阻止浮动元素覆盖。 如果一个浮动元素后面跟着一个非浮动的元素，那么就会产生一个重叠的现象。 如何解决多个元素重叠问题使用z-index属性可以设置元素的层叠顺序 页面布局的方法有哪些？ 双飞翼（圣杯）布局 三列布局，中间宽度自适应，两边定宽 中间栏要在浏览器中优先展示渲染 允许只用一个额外的DIV标签 要求用最简单的CSS，最少的HACK语句 多栏布局 栏栅格布局 多列布局 弹性布局 flexbox布局 流式布局（Fluid） 瀑布流布局 响应式布局","categories":[{"name":"前端","slug":"前端","permalink":"https://ymq19.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://ymq19.github.io/tags/CSS/"}]},{"title":"HTML知识合集","slug":"HTML知识合集","date":"2021-08-15T04:29:21.000Z","updated":"2021-08-18T09:02:47.088Z","comments":true,"path":"2021/08/15/HTML知识合集/","link":"","permalink":"https://ymq19.github.io/2021/08/15/HTML%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/","excerpt":"","text":"浏览器页面由哪三层构成，分别是什么，作用是什么构成： 结构层、表示层、行为层 分别是：HTML、CSS、JavaScript 作用： HTML实现页面结构、CSS完成页面的表现与风格、JavaScript实现客户端的一些功能和业务 ★ 网页的表示层和行为层总是存在的，即使我们未给出任何具体的指令。此时，Web浏览器把它默认样式和默认事件处理函数施加在网页的结构上。例如，浏览器会在呈现“文本段”元素时留出页边距，有些浏览器会在用户把鼠标悬停在某个元素的上方时弹出一个显示该元素的title属性值的提示框，等等。 HTML5的优点与缺点一、优点 提高可用性和改进用户的友好体验 加入几个新标签，有助于开发人员定义重要内容 可给站点带来更多多媒体元素（视频和音频） 可很好的替代Flash和Sliverlight（跨浏览器、跨平台插件，为网络带来下一代基于.NET媒体体验） 涉及网站抓取和索引时，SEO很友好 可大量应用于移动应用程序和游戏 可移植性好 二、缺点 安全：web storage、web socket 这样的 功能很容易被黑客利用，来盗取用户的信息和资料。 完善性：许多特性各浏览器支持程度也不一样 性能：某些平台下的引擎问题导致HTML5性能低下 浏览器兼容性：IE9以下浏览器几乎全军覆没 Doctype作用？严格模式和混杂模式如何区分？它们有何差异？一、Doctype的作用是什么？‘&lt;!DOCTYPE&gt;声明叫做文件类型定义（DTD），声明的作用是为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪些规范来解析文档。&lt;!DOCTYPE&gt;声明必须在HTML文档的第一行，这并不是一个HTML标签。 二、严格模式与混杂模式如何区分？它们有何意义？严格模式： 又称标准模式，是指浏览器按照W3C标准解析代码 混杂模式： 又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码 如何区分： 浏览器解析时到底使用严格模式还是混杂模式，与网页中的DTD直接相关。若文档包含严格的DTD或者包含有URI的过渡DTD，以严格模式呈现；若由没有URI的过渡DTD或DOCTYPE不存在/格式不正确，以混杂模式呈现。 意义： 两种模式存在的意义与来源密切相关，只存在严格模式，许多旧网站会受到影响，只存在混杂模式，就会回到当时浏览器大混战时的混乱，每个浏览器都有自己的解析模式。 ★ HTML5没有DTD，因此没有严格模式与混杂模式的区别 三、差异 盒模型高度：严格模式指的是元素的内容和高度，混杂模式还包含padding和border 设置行内元素的高度：严格模式下，给span等行内元素设置宽高都不会生效，混杂模式下会生效 设置百分比的高度：严格模式下，元素高度由其包含的内容来决定，如果父元素没有高度，子元素设置百分比高度无效 用margin: 0 auto 设置水平居中：严格模式下，可以使元素水平居中，混杂模式下失效，解决方法用text-align属性 混杂模式下设置图片的padding失效，table中的字体属性不能继承上层的设置，white-space: pre （处理元素内的空白）会失效 四、常用的具体声明 HTML5： HTML 4.01: 严格模式包含所有HTML元素和属性，但不包括展示性的和弃用的元素（如font），不允许框架集（Framesets）;过渡模式包含所有HTML元素和属性，包含展示性的和弃用的元素（如font），不允许框架集（Framesets）；框架模式等同于过渡模式，但允许框架集内容。 HTML 4.01 Strict ： HTML 4.01 Transitional ： HTML 4.01 Frameset ： XHTML 1.0（四种）：前三种模式同上，XHML 必须以格式正确的 XML 来编写标记。 XHTML 1.0 Strict ： XHTML 1.0 Transitional ： XHTML 1.0 Frameset： XHTML 1.1 该 DTD 等同于 XHTML 1.0 Strict，但允许添加模型。 HTML5有哪些新特性、移除了哪些元素？一、新特性 语义化标签：等 绘画canvas SVG绘图 视频和音频，用于媒介的video和audio元素 input增强型表单控件：calendar，date，time，email，url，search 本地离线存储：localStorage长期存储数据，浏览器关闭后数据不丢失；sessionStorage的数据在浏览器关闭后自动删除 新的技术：WebWorker，WebSocket，Geolocation WebWork：工作线程，允许JavaScript创建多个线程，但是子线程完全受主线程控制，且不得操作DOM WebSocket：服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。 建立在TCP协议之上，服务器端实现比较容易 与HTTP协议有良好的兼容性。默认端口也是80和443 没有同源限制，客户端可以与任意服务器通信 协议标识符是ws（如果加密，则为wss），服务器网址就是URL Geolocation：地理定位，用于定位用户的位置 二、移除的元素 纯表现的元素：basefont， big， center， font， s， strike， tt， u 对可用性产生负面影响的元素： frame， frameset， noframes 你做的网页在哪些浏览器测试过，这些浏览器的内核是什么？ IE：trident（IE6~IE11） Chrome：Blink（基于webkit，Google和Opera Software共同开发） FireFox：gecko Safari：webkit Opera：以前是presto内核，现在是Blink Edge：Chromium/Blink 说说你对HTML5的认识？（是什么，为什么）一、是什么HTML5指的是包括HTML、CSS和JavaScript在内的一套技术组合。能够减少网页浏览器对于插件的使用，例如Flash，Sliverlight。并且提供更多能有效加强网络应用的标准集。HTML5是HTML的最新版本。 二、为什么HTML4陈旧不能满足日益发展的互联网需要，特别是移动互联网。为了增强浏览器功能Flash被广泛使用，但安全和稳定堪忧，不适合移动端使用。HTML5增强了浏览器的原生功能，符合HTML5规范的浏览器功能将更加强大，减少了Web应用对插件的依赖，让用户体验更好，让开发更加方便。 对WEB标准以及W3C的理解与认识？HTML（结构），CSS（表现），JavaScript（行为）三部分独立分开，使其更具有模块化。 W3C对WEB标准提出了规范化的要求： 结构要求 标签字母要小写 标签要闭合 标签不允许随意嵌套 css和js要求 尽量使用外链css样式表和js脚本。使结构、表现和行为分为三块，符合规范。同时提高页面渲染速度，提高用户体验。 样式尽量少用行间样式表，使结构与表现分离，标签的id和class等属性命名要做到见文知义，标签越少，加载越快，用户体验提高，代码维护简单，便于改版 不需要变动页面内容，便可提供打印版本而不需要复制内容，提高网站易用性 HTML全局属性（global attribute）有哪些？ accesskey：设置访问元素的键盘快捷键 class：规定元素的类名 contenteditable：规定是否可编辑元素的内容 contextmenu：指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单。 **data-*：**用于存储页面的自定义数据 dir：设置元素中的内容的文本方向 draggable：设置元素是否可拖拽 dropzone：设置元素拖放类型 hidden：规定元素仍未或不在相关 id：元素id，文档内唯一 lang：元素内容的语言 spellcheck：是否启动拼写和语法检查 style：行内css样式 tabindex：设置元素可以获取焦点，通过tab导航 title：规定元素有关的额外信息 translate：元素和子孙节点内容是否需要本地化 HTML5行内元素有哪些，块级元素有哪些？一、行内元素大多为描述性标记 span a br b strong img sub i em del input textarea select 二、块级元素大多为结构性标记 address center h1 h2 h3 h4 h5 h6 hr p pre blockquote marquee ul ol dl table form div 什么是WebGL，它有什么优点?WebGL：Web Graphics Library 是一种3D绘图标准，这种绘图技术标准允许把JavaScript和OpenGL ES 2.0 结合在一起，通过增加OpenGL ES 2.0的一个JavaScript绑定，WebGL可以为HTML5 Canvas提供硬件3D加速渲染，还能创建复杂的导航和数据视觉化。 优点： 通过HTML脚本本身实现Web交互式三维动画的制作，无需任何浏览器插件支持 利用底层的图形硬件加速功能进行的图形渲染，是通过统一的、标准的、跨平台的OpenGL接口实现的 请你描述下cookies，sessionStorage和localStorage的区别？一、区别 特性 Cookies localStorage sessionStorage 特性 一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookies，默认是关闭浏览器后失效 除非被清除，否则永久保存 仅在当前会话下有效，关闭页面或浏览器后被清除 存放数据大小 4K左右 一般为5MB 一般为5MB 与服务器端通信 每次都会携带在HTTP头中，如果使用Cookies保存过多数据会带来性能模式 仅在客户端中保存，不参与和服务器的通信 仅在客户端中保存，不参与和服务器的通信 易用性 需要程序员自己封装，源生的Cookies接口不友好 源生接口可以接收，亦可再次封装对Object和Array有更好的支持 源生接口可以接收，亦可再次封装对Object和Array有更好的支持 二、应用场景 sessionStorage：在不需要和服务器交互的场所，用来存储用户数据之类的，可以在路由页跳转的时候取出更改储存，减少调用接口的次数，减轻服务器压力 localStorage：会话状态管理，可替换Cookies Cookies：会话状态管理、个性化设置、浏览器行为跟踪 8月16日更新 说说你对HTML语义化的理解？一、什么是HTML语义化基本上围绕几个主要的标签，像标题（H1~H6）、列表（li）、强调（strong em）等等 根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。 二、为什么要语义化 为了在没有CSS的情况下，页面也能呈现出很好的内容结构、代码结构 用户体验，例如title、alt用于解释名词或解释图片信息、label标签的或用 有利于SEO和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息（爬虫依赖于标签来确定上下文和各个关键字的权重） 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页 便于团队开发和维护，语义化更具有可读性，是下一步网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化 三、语义化标签123456789101112&lt;header&gt;&lt;/header&gt;&lt;footer&gt;&lt;/footer&gt;&lt;nav&gt;&lt;/nav&gt;&lt;section&gt;&lt;/section&gt;&lt;!-- 一套结构完整且独立的内容部分 --&gt;&lt;articel&gt;&lt;/articel&gt;&lt;!-- 主题的附属信息（文章的作者以及信息内容） --&gt;&lt;aside&gt;&lt;/aside&gt;&lt;!-- 媒体元素 --&gt;&lt;figure&gt;&lt;/figure&gt;&lt;datalist&gt;&lt;/datalist&gt;&lt;detail&gt;&lt;/detail&gt; link和@import的区别？ link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS link引用CSS时，在页面载入时同时加载；@import需要页面完全载入以后加载 link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持 link支持使用JavaScript控制DOM去改变样式；@import不支持 说说你对SVG的理解？SVG可缩放适量图形是基于可扩展标记语言（XML），用于描述二维矢量图形的一种图形结构。SVG严格遵从XML语法，用文本格式的描述性语言描述图像内容，因此是一种和图像分辨率无关的矢量图形。 特点 任意缩放，不会破坏图像的清晰度、细节等 文本独立，SVG中的文字独立于图像，不会有字体的限制，用户系统即便没有安装某一字体，也会看到制作时完全相同的画面 较小文件，总体来讲，比GIF和JPEG格式文件小很多，因此下载很快 超强显示效果：边缘清晰，清晰度适合任何屏幕分辨率和打印分辨率 超级颜色控制：提供1600万种颜色的调色板，支持ICC颜色描述文件标准、RGB、线X填充、渐变和蒙版 浏览器支持：IE9，火狐，谷歌，Opera和Safari都支持 说说超链接target属性的取值和作用？target这个属性指定链接的页面在浏览器窗口中的打开方式 参数值： _blank：在新浏览器窗口中打开链接文件 _parent：将链接的文件载入含有该链接框架的父框架集或父窗口中 _self：在同一框架或窗口中打开所链接的文档 _top：在当前的整个浏览器窗口中打开所链接的文档 ‘data-‘属性的作用是什么？h5新增的前端开发者提供自定义的属性，这些属性集可以通过对象的’dataset’（使用驼峰风格）或’getAttribute’方法获取。 介绍一下你对浏览器内核的理解？主要分成两部分：渲染引擎和JS引擎。 渲染引擎： ​ 负责取得网页的内容（HTML、XML、图像等）、整理讯息（加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。 JS引擎： ​ 解析和执行JavaScript来实现网页的动态效果 最开始渲染引擎和JS引擎并没有区分的很明显，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。 iframe有哪些缺点如需使用iframe，最好通过JavaScript动态给iframe添加src属性值 阻塞主页面的Onload事件 搜索引擎的检索程序无法解读这个页面，不利于SEO 和主页面共享连接池，而浏览器对相同域的连接有限制，影响页面的并行加载 Label的作用是什么，是怎么用的？label标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。 用法： 12&lt;label for=&quot;name&quot;&gt;Number:&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; /&gt; 8月18日更新 如何实现浏览器内多个标签页之间的通信 WebSocket：需要页面与服务器建立WebSockets连接 SharedWorker LocalStorage：LocalStorage在一个标签页被添加、修改或删除时，都会触发storage事件，通过另一个标签页监听storage事件，即可得到localStorage存储的值，实现不同标签页之间的通信 Cookies：将传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息 如何在页面上实现一个圆形的可点击区域 使用border-radius map+area（带有可点击区域的图像映射） 123&lt;map name=&quot;Map&quot; id=&quot;Map&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;821, 289, 68&quot; href=&quot;www.baidu.com&quot; target=&quot;_blank&quot;&gt;&lt;/area&gt;&lt;/map&gt; 纯js实现，求点不在圆上的简单算法、获取鼠标坐标 如何在页面上画个三角形123456789&lt;style&gt;#box &#123; width: 0; height: 0; border-width: 50px; border-style: solid; border-color: red transparent transparent tansparent;&#125;&lt;/style&gt; title与h1的区别、b与strong的区别、i与em的区别？ title只是个标题，通常用来定义浏览器标签页的名称，h1表示层次明确的标题，对页面信息的抓取有很大的影响 strong标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：会重读，只是展示强调内容 i内容展示为斜体，em表示斜体强调的文本 简述一下src与href的区别src用于替换当前元素，href用于当前文档和引用资源之间确立联系 src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片。当浏览器解析到该元素时，会暂停其他资源的下载和处理，知道将该资源、编译、执行完毕。 href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，并行下载资源并且不会停止对当前文档的处理。 谈谈你对canvas的理解？canvas是HTML5新增的HTML5标签与操作canvas的javascript API，它可以实现在网页中完成动态的2D与3D图像技术。标记和SVG以及VML之间的一个重要不同是，有一个基于JavaScript的绘图API，而SVG和VML使用一个XML文档来描述绘图。SVG绘图很容易编辑与生成，但功能明显要弱一些。canvas可以完成动画、游戏、图表、图像处理等原来需要Flash完成的一些功能。 WebSocket与消息推送?B/S架构的系统多使用HTTP协议 HTTP协议特点: 无状态协议 用于通过Internet发送请求消息和响应消息 使用端口接收和发送消息,默认为80端口 双向通信与消息推送: 轮询：客户端定时向服务器发送Ajax请求，服务器接到请求后马上但会响应消息并关闭连接 长轮询：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求 长连接：在页面中嵌入一个隐藏iframe，将这个隐藏iframe的src属性设为对一个长连接的请求或是xhr请求，服务端就能源源不断地往客户端输入数据 Flash Socket：在页面中嵌入一个使用了Socket类的Flash程序JavaScript通过调用此Flash程序提供的Socket接口进行通信，JavaScript在收到服务器端传送的信息后控制页面的显示 WebSocket：HTML5开始提供的一种与浏览器与服务器进行全双工通讯的网络技术。依靠这个技术可以实现客户端和服务端的长连接，双向实时通信。 img的title和alt有什么区别？alt用于图片无法加载时显示，title为该属性提供信息，通常当鼠标滑动到元素上显示 表单的基本组成部分有哪些，表单的主要用途是什么？主要用途：负责数据采集的功能，和向服务器传送数据 组成：表单标签、表单域、表单按钮 表单标签：包含了处理表单数据所用的CGI程序的URL，以及表单提交到服务器的方法 表单域：包含了文本框、密码框、隐藏框、多行文本框、复选框、单选框、下拉选择框和文件上传框等 表单按钮：包括提交按钮、复位按钮和一般按钮，用于将数据传送到服务器上的CGI脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作 表单提交中GET和POST方式的区别？ get是从服务器上获取数据，post是向服务器传送数据 get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址，用户看不到这个过程 对于get方式，服务端用Request.QueryString接收，post方式，服务端用Request.Form获取提交的数据 get传送的数据量较少，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4最大量为80KB，IIS5中为100KB get安全性低，post安全性高 HTML5标准提供了哪些新的API？ Media API Text Track API Application Cache API User Interaction Data Transfer API Command API Constraint Validation API History API HTML5应用程序缓存和浏览器缓存有什么区别？应用程序缓存是HTML5的重要特性之一，提供了离线使用的功能，让应用程序可以获得本地的网站内容，例如HTML、CSS、图片以及JavaScript。这个特性可以提高网站性能，它的实现借助于manifest。与传统浏览器缓存相比，它不强制用户访问的网站内容被缓存 1234&lt;!doctype html&gt;&lt;html manifest=&quot;example.appcache&quot;&gt; &lt;/html&gt; 新的HTML5文档类型和字符集是？文档类型：&lt;!doctype html&gt; 使用UTF-8编码示例： 未完待续…","categories":[{"name":"前端","slug":"前端","permalink":"https://ymq19.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://ymq19.github.io/tags/HTML/"}]},{"title":"Hexo博客系统——使用Volantis主题","slug":"Hexo博客系统——使用Volantis主题","date":"2021-08-14T10:38:26.000Z","updated":"2021-08-14T11:50:11.339Z","comments":true,"path":"2021/08/14/Hexo博客系统——使用Volantis主题/","link":"","permalink":"https://ymq19.github.io/2021/08/14/Hexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Volantis%E4%B8%BB%E9%A2%98/","excerpt":"","text":"主题安装修改站点配置文件12# blog/_config.yml文件中修改theme: volantis 下载主题12// 终端中输入npm i hexo-theme-volantis 站点配置网站标题blog/_config.yml 12# 网站标题title: Chaos4Yarn的学习站 网站图标blog/_config.yml 12# 网站标题favicon: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/favicon/favicon.ico 多语言设置blog/_config.yml 123456# 语言language: - zh-CN - en - zh-HK - zh-TW 主题配置创建主题配置文件创建配置文件在博客根目录的_config.yml文件旁新建一个文件: _config.volantis.yml，这个文件中的配置信息优先级高于主题文件夹中的配置文件。 覆盖自定义配置blog/_config.volantis.yml 导航栏123456789101112131415161718192021222324252627282930313233343536# 设置导航栏navbar: # 导航栏显示方式 visiable: auto # always, auto logo: # choose [img] or [icon + title] img: icon: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/favicon/favicon.ico title: 学习站 # 导航栏选项 menu: - name: 博客 icon: fas fa-rss url: / - name: 分类 icon: fas fa-folder-open url: categories/ - name: 标签 icon: fas fa-tags url: tags/ - name: 归档 icon: fas fa-archive url: archives/ - name: 更多 icon: fas fa-ellipsis-v rows: - name: 友链 icon: fas fa-link url: friends/ - name: 关于 icon: fas fa-info-circle url: about/ - name: hr - name: 背景音乐 icon: fas fa-compact-disc # 导航栏显示搜索框 search: 搜索 搜索框123456789101112131415161718# 设置搜索引擎search: enable: true service: hexo # hexo, google, algolia, azure, baidu js: https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@2.6.4/js/search.js google: apiKey: engineId: algolia: applicationID: apiKey: indexName: azure: serviceName: indexName: queryKey: baidu: apiId 封面12345678910111213141516171819202122232425262728# 设置封面cover: # 封面名字 title: &#x27;Chaos4Yarn&#x27; # 封面子标题 subtitle: &#x27;学习站&#x27; # 封面背景图 background: https://www.ymq19.cn/blog/cover.jpg # 封面中下区的选项栏 features: - name: 博客 img: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f4f0.svg url: / - name: 分类 img: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f5c2.svg url: /categories/ target: _self - name: 标签 img: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f5d2.svg url: /tags/ - name: 归档 img: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f5c3.svg url: /archives/ - name: 源码 img: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f9ec.svg url: https://github.com/ymq19/ymq19.github.io target: _self 文章布局12345678910111213141516171819202122232425262728# 文章布局article: # 文章列表页面的文章卡片布局方案 preview: scheme: landscape # landscape # pin icon for post pin_icon: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f4cc.svg # auto generate title if not exist auto_title: true # false, true # auto generate excerpt if not exist auto_excerpt: true # false, true # show split line or not line_style: solid # hidden, solid, dashed, dotted # show readmore button readmore: auto # auto, always # 文章详情页面的文章卡片本体布局方案 body: # meta library meta_library: # 默认文章作者（可在 front-matter 中覆盖） author: avatar: https://www.ymq19.cn/blog/ai.jpg name: Chaos4Yarn url: / updated: icon: fas fa-edit title: &#x27;更新于：&#x27; format: &#x27;ll&#x27; # 日期格式 http://momentjs.com/docs/ 侧边栏1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 设置侧边栏sidebar: # 在页面中显示 for_page: [blogger, post, category, tagcloud] # 在文章页显示 for_post: [toc] widget_library: # 作者信息 blogger: class: blogger display: [ desktop, mobile ] # [desktop, mobile] avatar: https://www.ymq19.cn/blog/cat.jpeg shape: circle # circle, rectangle url: /about/ title: subtitle: jinrishici: true # Poetry Today. You can set a string, and it will be displayed when loading fails. social: true # 文章索引 toc: class: toc display: [desktop, mobile] # [desktop, mobile] header: icon: fas fa-list title: 本文目录 list_number: true min_depth: 2 max_depth: 5 # 按目录对文章进行分类 category: class: category display: [ desktop ] # [desktop, mobile] header: icon: fas fa-folder-open title: 文章分类 url: /categories/ # tagcloud widget # 热门标签，按标签对文章分类 tagcloud: class: tagcloud display: [ desktop, mobile ] # [desktop, mobile] header: icon: fas fa-tags title: 热门标签 url: /tags/ min_font: 14 max_font: 24 color: true start_color: &#x27;#999&#x27; end_color: &#x27;#555&#x27; 页脚1234567891011121314# 设置页脚site_footer: # aplayer: 音乐播放器，social：社交关系，source：来源，analysis：网站访问分析，copyright：版权 layout: [aplayer, social, source, analytics, copyright] copyright: &#x27;[Copyright © 2021-2021 Chaos4Yarn](/)&#x27; social: - icon: fas fa-rss url: atom.xml - icon: fas fa-envelope url: 1976583473@qq.com - icon: fab fa-github url: https://github.com/ymq19 - icon: fas fa-headphones-alt url: https://music.163.com/#/user/home?id=301256444 全局CSS12345678910# 页面CSS设置custom_css: max_width: 1080px # Sum of body width and sidebar width font_smoothing: true # font-smoothing for webkit cursor: enable: true sidebar: effect: [shadow] body: effect: [shadow] # [shadow, floatable, blur] 右键菜单1234567891011121314151617181920212223242526272829303132# 自定义右键菜单rightmenu: enable: true faicon: fa # 公共图标类型 fa fal fas fad # hr: 分割线, music: 音乐控制器 layout: [home, hr, help, hr, source_docs, source_theme, hr, print, darkmode, music] ### 可选功能项 ### print: # 只有文章页才允许自定义打印 name: 打印页面 icon: fa fa-print defaultStyles: true # 是否使用预制的打印样式 # js: # 自定义 js ，可用于修饰打印样式~， 右键剔除了对 Jquery 的依赖，所以此处你只能使用原生 js # - document.querySelector(&#x27;article#comments&#x27;).remove() # 移除评论 darkmode: # 需开启 plugins.darkmodejs name: 暗黑模式 icon: fa fa-moon customPicUrl: # 右键的图片复制：只有 Chrome 支持，且只支持 PNG 格式的图片。 enable: false # 如果使用了对象存储且开启了自适应 Webp，那么可以提供额外的链接用以替换图片的访问地址 old: #https://static.inkss.cn/img/article/ new: #https://cdn.jsdelivr.net/gh/inkss/inkss-cdn@master/img/article/ help: name: 常见问题 icon: fa fa-question url: https://volantis.js.org/faqs/ source_docs: name: 本站源码 icon: fa fa-code-branch url: https://github.com/ymq19/ymq19.github.io source_theme: name: 主题源码 icon: fa fa-code-branch url: https://github.com/volantis-x/hexo-theme-volantis/ 第三方插件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# 第三方插件plugins: # 剪切板 clipboard: enable: true # 字数统计 wordcount: enable: true # 视觉滚动效果 parallax: enable: true highlightjs: enable: true # Please set hexo.config.highlight.enable = false !!! js: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.1.0/build/highlight.min.js css: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.1.0/build/styles/default.min.css # 图片懒加载 # https://www.npmjs.com/package/vanilla-lazyload lazyload: enable: true js: https://cdn.jsdelivr.net/npm/vanilla-lazyload@17.1.0/dist/lazyload.min.js onlypost: false loadingImg: # https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg blurIn: true # 模糊加载效果 （loadingImg为空时有效） # 音乐播放器 aplayer: enable: true js: aplayer: https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js meting: https://cdn.jsdelivr.net/npm/meting@2.0/dist/Meting.min.js # Required server: netease # netease, tencent, kugou, xiami, baidu type: playlist # song, playlist, album, search, artist # 歌单id，需公开，隐私歌单无效 id: 6917175772 # song id / playlist id / album id / search keyword # Optional fixed: false # enable fixed mode theme: &#x27;#1BCDFC&#x27; # main color autoplay: false # audio autoplay order: list # player play order, values: &#x27;list&#x27;, &#x27;random&#x27; loop: all # player loop play, values: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27; volume: 0.7 # default volume, notice that player will remember user setting, default volume will not work after user set volume themselves list_max_height: 320px # list max height list_folded: true message: # 音乐通知，播放、暂停、失败 时的图标 enable: true play: fas fa-play pause: fas fa-pause # 暗黑模式 darkmodejs: enable: true # 网站统计 analytics: busuanzi: # https://cdn.jsdelivr.net/gh/volantis-x/cdn-busuanzi@2.3/js/busuanzi.pure.mini.js leancloud: app_id: GCYDRKI6XRkyC7EuEhJv90ia-MdYXbMMI app_key: 4xKBXGBj6BgecU62vff5rJHs custom_api_server: # 一般不需要写，除非自定义了 API Server 创建博文新建博文1234567891011# 终端中输入，&lt;title&gt;使用真正的文章名hexo new post &lt;title&gt;# 创建成功，会在_post文件下显示新建的md文件，在头部可修改标题、分类及标签，例如：---title: XXXdate: 2099-08-15 20:20:20categories: 其他tags: - hexo--- 上传部署1234# cmd命令hexo clean /回车hexo g /回车hexo d /回车","categories":[{"name":"其他","slug":"其他","permalink":"https://ymq19.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ymq19.github.io/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-13T13:24:49.945Z","updated":"2021-08-14T07:42:26.727Z","comments":true,"path":"2021/08/13/hello-world/","link":"","permalink":"https://ymq19.github.io/2021/08/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"其他","slug":"其他","permalink":"https://ymq19.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ymq19.github.io/tags/hexo/"},{"name":"welcome","slug":"welcome","permalink":"https://ymq19.github.io/tags/welcome/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"https://ymq19.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"其他","slug":"其他","permalink":"https://ymq19.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://ymq19.github.io/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"https://ymq19.github.io/tags/HTML/"},{"name":"hexo","slug":"hexo","permalink":"https://ymq19.github.io/tags/hexo/"},{"name":"welcome","slug":"welcome","permalink":"https://ymq19.github.io/tags/welcome/"}]}